import idautils , idc, idaapi, ida_search, ida_bytes, ida_auto
import struct



def set_hexrays_comment(address, text):
    '''
    set comment in decompiled code
    '''
    
    cfunc = idaapi.decompile(address)
    tl = idaapi.treeloc_t()
    tl.ea = address
    tl.itp = idaapi.ITP_SEMI
    cfunc.set_user_cmt(tl, text)
    cfunc.save_user_cmts() 


def set_comment(address, text):
    ## Set in dissassembly
    idc.set_cmt(address, text,0)
    ## Set in decompiled data
    set_hexrays_comment(address, text)
    
def Xor(data , key):
    res = ""
    for i in range(len(data)):
        res += chr(data[i] ^key[i%len(key)])
    return res
    
    
def get_data(ea):

    addrs = []
    while 1:
        ea = idc.prev_head(ea)
        
        if (idc.print_insn_mnem(ea) == "push") and idc.get_operand_type(ea, 0) == idc.o_imm:
                addrs.append((idc.get_operand_value(ea, 0)))
                
        if len(addrs) == 4:
            key = idc.get_strlit_contents(addrs[0])
            data_length = addrs[3]
            enc_data =  idc.get_bytes(addrs[2],data_length)
            break
            
    if key ==b'KJKLO': # c2 decryption key
        return "" , ""
        
    return  enc_data , key 
        
            

fun_addr = 0x005819B0 # decryption function address
    
for ref in idautils.XrefsTo(fun_addr):

    enc_data , key  = get_data(ref.frm)
    
    if enc_data!= "" and  key != "": 
        decrypted_string = Xor(enc_data,key)
        set_comment(ref.frm, decrypted_string)
