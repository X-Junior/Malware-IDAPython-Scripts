import json
import idaapi
import idc
import idautils
import ida_funcs


def get_api_hash(fn_name):
    result = 0x2b
    for c in fn_name:
        result = ord(c) + 0x10f * result
    return result & 0x1FFFFF


def transform_hash(api_hash):
    result =api_hash ^ (api_hash << 16) ^ 0x97E81919
    return result & 0x1fffff



def setup(json_file):
    global export_hashes
    exports_json = json.loads(open(json_file, 'rb').read())
    exports_list = exports_json['exports']
    for export in exports_list:
        api_hash = get_api_hash(export)
        export_hashes[api_hash] = export


def resolve(base_address):
    global export_hashes
    for ptr in range(0,0x30c,4):
            hash_value = idc.get_wide_dword(base_address + ptr)
            api_name = export_hashes[transform_hash(hash_value)]
            idc.set_name(base_address + ptr,api_name ,SN_NOWARN)
export_hashes = {}
setup('exports.json')     
       
#resolve(0x00414D90)

def resolve_with_pattern():
    global export_hashes
    
    seg_mapping = {idaapi.getseg(x).name: (idaapi.getseg(x).start_ea, idaapi.getseg(x).end_ea) for x in idautils.Segments()}
    start = seg_mapping[0x1][0]
    end = seg_mapping[0x1][1]
    
    api_hashing_func_pattern = " 8B ?? C1 ?? 10 33 ?? B9 B9 04 00 00  81 ?? 19 19 E8 97 8B ??  C1 ?? 15 "  # a1 ^ (a1 << 16) ^ 0x97E81919
    api_hashing_func= ida_search.find_binary(start, end, api_hashing_func_pattern, 16, idc.SEARCH_DOWN)
    api_hashing_func = idaapi.get_func(api_hashing_func).start_ea
    print('[*] Traget fucntion found at {}'.format(hex(api_hashing_func)))

    for ref in idautils.XrefsTo(api_hashing_func):
            
            addr = ref.frm
            temp_addr = idc.prev_head(addr)
            
            if (idc.print_insn_mnem(temp_addr) == "push"):
                temp_addr = idc.prev_head(temp_addr)
                hash_val = idc.get_operand_value(temp_addr,1)
                api_name = export_hashes[transform_hash(hash_val)]
                idc.set_cmt(temp_addr, api_name, 1)
                
            else:
                hash_addresses = idc.get_operand_value(idc.prev_head(addr),1)
                resolve(hash_addresses)
               

resolve_with_pattern()

